name: release

on:
  push:
    branches:
      - main 

env:
  PACKAGE_NAME: "django-deepl"
  OWNER: "iTz-i-Soldier"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(python setup.py --version)
          echo "Current version: $CURRENT_VERSION"

          # Calcola la nuova versione incrementando il numero della patch
          IFS='.' read -r -a parts <<< "$CURRENT_VERSION"
          parts[2]=$((parts[2] + 1))
          NEW_VERSION="${parts[0]}.${parts[1]}.${parts[2]}"
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_ENV"

      - name: Update setup.py version
        run: |
          sed -i "s/version='.*'/version='${{ env.new_version }}'/" setup.py

      - name: Commit new version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Bump version to ${{ env.new_version }}"
          git tag ${{ env.new_version }}
          git push origin main --tags

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build source and wheel distribution
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.new_version }} dist/* --title "Release ${{ env.new_version }}" --generate-notes
